// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    // get control bits
    And(a=instruction[15], b=true, out=bit15);
    And(a=instruction[12], b=bit15, out=bita);
    And(a=instruction[5], b=bit15, out=d1);
    And(a=instruction[4], b=bit15, out=d2);
    And(a=instruction[3], b=bit15, out=d3, out=writeM);
    And(a=instruction[2], b=bit15, out=jmpBit1);
    And(a=instruction[1], b=bit15, out=jmpBit2);
    And(a=instruction[0], b=bit15, out=jmpBit3);
    
    //Aregister control bit
    Not(in=bit15, out=nbit15);
    Or(a=nbit15, b=d1, out=aRegControl);

    //process pc control bits
    Or(a=ng, b=zr, out=temp);
    Not(in=temp, out=gt);
    And(a=ng, b=jmpBit1, out=temp6);
    And(a=zr, b=jmpBit2, out=temp7);
    And(a=gt, b=jmpBit3, out=temp8);

    Or(a=temp6, b=temp7, out=temp11);
    Or(a=temp8, b=temp11, out=conJump);
    Not(in=conJump, out=unconJump);
    
    // components
    Mux16(a=instruction, b=ALUout, sel=bit15, out=temp1);
    ARegister(in=temp1, load=aRegControl, out=Areg,out[0..14]=addressM);
    
    DRegister(in=ALUout, load=d2, out=Dreg); 

    Mux16(a=Areg, b=inM, sel=bita, out=temp2);
    ALU(x=Dreg, y=temp2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=ALUout, zr=zr, ng=ng);
    PC(in=Areg, load=conJump, inc=unconJump, reset=reset, out[0..14]=pc);
}